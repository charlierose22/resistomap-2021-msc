setwd("~/Documents/R_WorkingProjects/Resistomap_21")

library(plyr)
library(tidyverse)
library(readr)

# import raw dataset
rawdata <- 
  read_csv("Raw CSV Files/rawdata.csv")

# remove unsatisfactory flags
flagsremoved <- 
  rawdata[!grepl(
    'CurveFitFail|MultipleMeltPeak|NoAmplification',
    rawdata$Flags),]

# check Ct column has no NAs
basedata <- 
  subset(flagsremoved, Ct != "NA")

# create replicate and ID columns
basedata$Replicate = NA
basedata$ID = NA

# add replicate IDs
basedata <- 
  mutate(basedata, 
                   Replicate = case_when(
  str_detect(Sample, "rep1") ~ "Rep1",
  str_detect(Sample, "rep2") ~ "Rep2",
  str_detect(Sample, "rep3") ~ "Rep3" ))

# add sample IDs (swapped ASP Distribution to be Sample 1 as it's the earliest stage)
basedata <- 
  mutate(basedata, ID = case_when(
  str_detect(Sample, "1A") ~ "B_FeedPump",
  str_detect(Sample, "2A") ~ "C_Digester2",
  str_detect(Sample, "3A") ~ "D_Digester4" ,
  str_detect(Sample, "4A") ~ "E_CentrifugeIn",
  str_detect(Sample, "5A") ~ "F_NewDrySolid",
  str_detect(Sample, "6A") ~ "G_TWDrySolid",
  str_detect(Sample, "7A") ~ "A_ASPDist",
  str_detect(Sample, "8A") ~ "H_FSTDist"))

# remove only one replicate
solosremoved <- 
  ddply(basedata, c("Assay", "ID"), 
        function(d) {if (nrow(d) > 1) d else NULL})

# calculate means
means <- 
  solosremoved %>% 
  group_by(Assay, ID) %>% 
  summarise_at(vars(Ct, Tm, Efficiency), 
               list(mean = mean))

# pull "Assay" column out as a list.
Assays = dplyr::pull(means, Assay)

# remove Tm and Efficiency columns
Ct_only <- means
Ct_only$Tm_mean = NULL
Ct_only$Efficiency_mean = NULL

# remove assays which don't have a value for ASP
Ct_onlywide <- 
  Ct_only %>%
  pivot_wider(names_from = ID, 
              values_from = Ct_mean)
Ct_only_ASP = subset(Ct_onlywide, Ct_onlywide$A_ASPDist != "NA")
ASP_only = Ct_only_ASP %>%
  pivot_longer(
    cols = A_ASPDist:H_FSTDist,
    names_to = "ID",
    values_to = "Ct_mean")

# create a wide table and transpose
wide_meanCt <- 
  ASP_only %>% 
  pivot_wider(names_from = ID, 
              values_from = Ct_mean)
transposed_widemeanCt <- t(wide_meanCt[2:9])
transposed_widemeanCt[is.na(transposed_widemeanCt)] <- 0
# keeps numeric but we've lost assay codes

# make sure the top row is the Assay codes
assay_names <- t(wide_meanCt[1])
colnames(transposed_widemeanCt) <- 
  as.character(assay_names[1,])

# change 0 to NA
transposed_widemeanCt[transposed_widemeanCt == 0] <- NA

# Calculate ∆Ct and ∆∆Ct values.
DeltaCt <- transposed_widemeanCt[ , 2:137] - transposed_widemeanCt[ , "AY1"]

# problem calculating correct ∆∆Ct values as not all genes have a ASP value. 
DF_DeltaCt <- 
  as.data.frame(DeltaCt)

DeltaDeltaCt <- DF_DeltaCt - as.list(DF_DeltaCt[1, ])

DeltaDeltaCt_NoASP <- DeltaDeltaCt[-1, ]

DDCtPower <- 2^-(DeltaDeltaCt_NoASP)


# add ID variable back to row names.
ID_DDCtPower <- 
  rownames_to_column(DDCtPower, var = "ID")
Assay_DDCtPower <- 
  column_to_rownames(ID_DDCtPower, "ID")

# transpose table, to add assay annotations.
DDCtPower_Long <- 
  as.data.frame(t(Assay_DDCtPower))
  
# import assay information
assayinformation <- 
  read_csv("Raw CSV Files/assayinformation.csv")

# remove columns not needed
assayinformation$`Forward Primer` = NULL
assayinformation$`Reverse Primer` = NULL

# change column names for easier code
colnames(assayinformation) = 
  c("Assay", "Gene", "Target_Antibiotic")

# join assay information with DDCt values.
Assays_DDCtPower_Long <- 
  rownames_to_column(DDCtPower_Long, var = "Assay")
AnnotatedDDCt <- 
  full_join(Assays_DDCtPower_Long, assayinformation, 
            by = c("Assay" = "Assay"))
Tidy_AnnotatedDDCt <- 
  AnnotatedDDCt %>% drop_na()

# pivot table longer to create a row of sample IDs
TidyData_All <- 
  Tidy_AnnotatedDDCt %>% 
  pivot_longer(
    cols = B_FeedPump:H_FSTDist,
    names_to = "Location",
    values_to = "Fold_Change")
