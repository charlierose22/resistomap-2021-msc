install.packages("tidyverse")
library(tidyverse)

# set working directory (I named a new folder "resistomap")
setwd("~/resistomap")

# import dataset!
library(readxl)
smartchip <- read_excel("Raw Data/SmartChip Results_University of York_04_21.xlsx",
sheet = "Raw data")
view(smartchip)
library(readxl)
smartchip <- read_excel("New Flags Removed.xlsx")
View(smartchip)

# import data from excel file, unsatisfactory flags were removed quickly in excel using the filter function but can be removed using the subset function in tidyverse.
smartchip <- subset(smartchip, Ct!="NA")

# making sure all NAs have been removed
dim(smartchip)
write.table(smartchip, file="SmartchipNAFlagRemoved.txt", sep="\t")

# create new columns for Replicates and IDs
smartchip$Replicate = NA
smartchip$ID = NA
smartchip <- mutate(smartchip, Replicate = case_when(
str_detect(Sample, "rep1") ~ "Rep1",
str_detect(Sample, "rep2") ~ "Rep2",
str_detect(Sample, "rep3") ~ "Rep3" ))

# this added in Replicate IDs, now to add in Sample Site IDs
smartchip <- mutate(smartchip, ID = case_when(
str_detect(Sample, "1A") ~ "1A",
str_detect(Sample, "2A") ~ "2A",
str_detect(Sample, "3A") ~ "3A" ,
str_detect(Sample, "4A") ~ "4A",
str_detect(Sample, "5A") ~ "5A",
str_detect(Sample, "6A") ~ "6A",
str_detect(Sample, "7A") ~ "7A",
str_detect(Sample, "8A") ~ "8A"))

# need to remove samples which only have one Ct score for a particular ID
write.table(smartchip, "removesoloresults.txt", sep ="\t")

# Removed these in excel too using the filter function for ease and time constraints (conditional formatting to highlight duplicates, removing samples without duplicates).
library(readxl)
smartchip_no_solos <- read_excel("resistomap/Singles Removed.xlsx")

# need to get means for replicates
smartchip_mean_assay <- smartchip_no_solos %>%
group_by(Assay, ID) %>%
summarize(mean_ct = mean(Ct), mean_tm = mean(Tm), mean_efficiency = mean(Efficiency),na.rm= TRUE)
dim(smartchip_mean_assay)

# this gives the column and row numbers

# make into a wider table, but we need to collapse ct values and remove other columns
assay_wide <- smartchip_mean_assay %>% pivot_wider(names_from = Assay, values_from = mean_ct)
View(assay_wide)

# pull column assay out as a list (to use with PCR library)
Assay_list = dplyr::pull(smartchip_mean_assay, Assay)

# rename mean assay to ct_only
ct_only = smartchip_mean_assay

# remove columns we don't need
ct_only$mean_efficiency =NULL
ct_only$mean_tm =NULL

wide_ct_only <- ct_only %>% pivot_wider(names_from = ID, values_from = mean_ct)
View(wide_ct_only)
# Tranpose (turn col to row and vice versa)
transposed <- t(wide_ct_only)

# writing out the table to remove the V row in text editor.
write.table(transposed, "transposed_ct_means.txt", sep ="\t")
ct <- read.table("transposed_ct_means.txt", header =T)

# make into long table now it's been read in
ct_long <- gather(ct, Assay, Ct, AY10:AY96)
View(ct_long)

# make empty column that's Ref-nonRef Ct
ct_long$AY1_Ct = NA
ct_long$AY1_Ct = ct_long$AY1-ct_long$Ct

(readxl)
assay_annotations <- read_excel("SmartChip Results_University of York_04_21.xlsx",
sheet = "Assay information", col_types = c("text",
"text", "text", "skip", "skip"))

# these are the assay info annotations with the target antibiotics and the column name has been slightly changed (there is a spelling mistake actually in this column further down but this doesn't matter)
colnames(assay_annotations) = c("Assay", "Gene", "Target_Antibiotic")

ct_with_annotations <- full_join(ct_long, assay_annotations, by =c("Assay" = "Assay"))
#this should have joined the annotations and the ct table together
view(ct_with_annotations)

genesremoved <- ct_with_annotations %>% drop_na(Ct)
View(genesremoved)
#this has removed all of the genes which do not have Ct values

#split based on target antibiotic
str(genesremoved)
ct_split <- split(genesremoved, genesremoved$Target_Antibiotic)
str(ct_split)
ct_aminoglycoside <- ct_split$Aminoglycoside
ct_betalactam <- ct_split$`Beta Lactam`
ct_integrons <- ct_split$Integrons
ct_mdr <- ct_split$MDR
ct_mge <- ct_split$MGE
ct_mlsb <- ct_split$MLSB
ct_other <- ct_split$Other
ct_phenicol <- ct_split$Phenicol
ct_quinolone <- ct_split$Quinolone
ct_sulfonamide <- ct_split$Sulfonamide
ct_taxonomic <- ct_split$Taxanomic
ct_tetracycline <- ct_split$Tetracycline
ct_trimethoprim <- ct_split$Trimethoprim

#double check NAs have been removed.
ct_aminoglycoside1 <- ct_aminoglycoside %>% drop_na(Ct)
ct_betalactam1 <- ct_betalactam %>% drop_na(Ct)
ct_integrons1 <- ct_integrons %>% drop_na(Ct)
ct_mdr1 <- ct_mdr %>% drop_na(Ct)
ct_mge1 <- ct_mge %>% drop_na(Ct)
ct_mlsb1 <- ct_mlsb %>% drop_na(Ct)
ct_other1 <- ct_other %>% drop_na(Ct)
ct_phenicol1 <- ct_phenicol %>% drop_na(Ct)
ct_quinolone1 <- ct_quinolone %>% drop_na(Ct)
ct_sulfonamide1 <- ct_sulfonamide %>% drop_na(Ct)
ct_taxonomic1 <- ct_taxonomic %>% drop_na(Ct)
ct_tetracycline1 <- ct_tetracycline %>% drop_na(Ct)
ct_trimethoprim1 <- ct_trimethoprim %>% drop_na(Ct)
ct_vancomycin1 <- ct_vancomycin %>% drop_na(Ct)

pdf("aminoglycoside_test_boxplot.pdf", width=8, height=5)
ggplot(data=ct_aminoglycoside1, aes(Sample, AY1_Ct)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT") + theme(legend.position = "none")
dev.off()
# test worked! Ready to plot graphs for each of the target classes. 

# plot the aminoglycoside graph
pdf("DCT_Aminoglycoside.pdf", width=8, height=5)
ggplot(data=ct_aminoglycoside1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# time for beta lactams
pdf("DCT_Beta_Lactam.pdf", width=8, height=5)
ggplot(data=ct_betalactam1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# now integrons
pdf("DCT_Integrons.pdf", width=8, height=5)
ggplot(data=ct_integrons1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# mdr
pdf("DCT_MDR.pdf", width=8, height=5)
ggplot(data=ct_mdr1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# mge
pdf("DCT_MGE.pdf", width=8, height=5)
ggplot(data=ct_mge1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# mlsb
pdf("DCT_MLSB.pdf", width=8, height=5)
ggplot(data=ct_mlsb1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# others
pdf("DCT_Other.pdf", width=8, height=5)
ggplot(data=ct_other1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

warnings()
#warnings describe how the graphics doesn't recognise the delta symbol in two of the gene names so has changed it to a dot

# phenicols
pdf("DCT_Phenicol.pdf", width=8, height=5)
ggplot(data=ct_phenicol1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# quinolones
pdf("DCT_Quinolone.pdf", width=8, height=5)
ggplot(data=ct_quinolone1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# sulfonamides
pdf("DCT_Sulfonamide.pdf", width=8, height=5)
ggplot(data=ct_sulfonamide1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# taxonomic
pdf("DCT_Taxonomic.pdf", width=8, height=5)
ggplot(data=ct_taxonomic1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# tetracycline
pdf("DCT_Tetracycline.pdf", width=8, height=5)
ggplot(data=ct_tetracycline1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# trimethoprim
pdf("DCT_Trimethoprim.pdf", width=8, height=5)
ggplot(data=ct_trimethoprim1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# vancomycin
pdf("DCT_Vancomycin.pdf", width=8, height=5)
ggplot(data=ct_vancomycin1, aes(Gene, AY1_Ct, col=Sample)) + geom_point() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("Delta CT")
dev.off()

# and now save (happy dance)
save.image("JuneGraphs.RData")
savehistory("JuneGraphs.Rhistory")